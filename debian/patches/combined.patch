Index: git/tob
===================================================================
--- git.orig/tob	2022-09-18 10:05:11.323605355 +0200
+++ git/tob	2016-11-13 20:34:15.000000000 +0100
@@ -197,7 +197,7 @@
     
     if [ "$NEEDROOT" = "yes" ] ; then
 	if [ $UID -ne 0 ]; then
-	    error "You need to be root to run tobs!"
+	    error "You need to be root to run tob!"
 	fi
     fi
 }
@@ -218,14 +218,9 @@
     	error "BACKUPDIR is deprecated: check your config file, and rename it to BACKUPDEV"
     fi
 
-    if [ -d "$BACKUPDEV" ]; then
-    	BACKUPDIR=$BACKUPDEV
-    	BACKUPDEV="${BACKUPDIR}/${VOLUMENAME}_${DATE}_${TYPE}.${EXT}"
-    elif [ "$BACKUPDEV" = "" ]; then
-        BACKUPDIR="/var/lib/tob"
-    	BACKUPDEV="${BACKUPDIR}/${VOLUMENAME}_${DATE}_${TYPE}.${EXT}"
-    elif [ -f "$BACKUPDEV" -o ! -e "$BACKUPDEV" ]; then
-        BACKUPDIR=`dirname $BACKUPDEV`
+    if [ "$BACKUPDEV" = "" ]; then
+        BACKUPDEV="/var/lib/tob"
+	message "Using default backup device $BACKUPDEV"
     fi
 
     # check that relevant environment vars are set
@@ -352,16 +347,17 @@
     #fi
     #		       'findswitch' also removed from the paragraph after next
 
-  $nicefindcmd find `cat $TOBHOME/volumes/$1.startdir` $xdevflag  -printf '%p'$S'[ctime:] %C@ [owner/group:]  %u:%g' \( \( -fstype fat -or -fstype vfat \) -and -printf ' [mtime:] %T@' -or -printf ' [inode:] %i' \) -printf ' [linkto:] %l [perm:] %m [hardlinks:] %n\n' | \
+  cat $TOBHOME/volumes/$1.startdir | \
+  xargs -i $nicefindcmd find {} $xdevflag  -printf '%p'$S'[ctime:] %C@ [owner/group:]  %u:%g' \( \( -fstype fat -or -fstype vfat \) -and -printf ' [mtime:] %T@' -or -printf ' [inode:] %i' \) -printf ' [linkto:] %l [perm:] %m [hardlinks:] %n\n' | \
 	sed -e 's.\\.\\\\.g' | \
 	# If the exclude file contains non-blank lines, filter against it.
 	# If it is empty, or doesn't exist, just cat stdin to stdout
 	if grep -q -s . $TOBHOME/volumes/$1.exclude ; then
-	    grep -v -f$TOBHOME/volumes/$1.exclude
+	    grep -v -f$TOBHOME/volumes/$1.exclude --binary-files=text
 	else
 	    cat
 	fi |
-	sort > $TMPLIST || \
+	sort -u > $TMPLIST || \
 	    error "list creation failed."
 
         grep -q . $TMPLIST ||
@@ -440,7 +436,7 @@
 searchlistings ()
 {
     cd $TOBLISTS || error "$TOBLISTS directory is missing."
-    files=`$LS -1 | $GREP -v _deletions$`
+    files=`$LS -1t | $GREP -v _deletions$`
 
     if [ "$files" = "" ] ; then
 	message "No backups were made."
@@ -477,14 +473,14 @@
     else
 	sed -e 's.\\\\.\\.g' -e "$SEDNAMESCRIPT" < "$1" > $FILELIST
 	eval "$BACKUPCMDTOSTDOUT" |
-	    wc |
-	    awk '{ if ($3 < 1000)
-		        printf ("Estimated: %d bytes\n",$3); 
-	           else if ($3 < 1000000)
-			printf ("Estimated: %.1f KB\n",$3/1000.0); 
-	           else
-			printf ("Estimated: %.1f MB\n",$3/1000000.0); }' \
-	    || error "backup size estimate failed."
+           wc -c |
+           awk '{ if ($1 < 1000)
+                       printf ("Estimated: %d bytes\n",$1);
+                  else if ($1 < 1000000)
+                       printf ("Estimated: %.1f KB\n",$1/1000.0);
+                   else
+                       printf ("Estimated: %.1f MB\n",$1/1000000.0); }' \
+	   || error "backup size estimate failed."
     fi
 }
 
@@ -497,9 +493,14 @@
 runverify ()
 {
     VOLUMENAME=$2		     # store name for usage in .rc file
-    if [ -d "$BACKUPDIR" ]; then
-	BACKUPDEV=`$LS ${BACKUPDIR}/${VOLUMENAME}_*Full.${EXT}`
+
+    if [ -d "$BACKUPDEV" ]; then
+        BACKUPDEV=(`$LS ${BACKUPDEV}/${VOLUMENAME}_*full.${EXT}`)
+        if [ ${#BACKUPDEV[*]} -ne 1 ]; then
+            error "More than one full backup to choose from.  Use -f to select one."
+        fi
     fi
+
     message "Now starting verify program for $BACKUPDEV."
     ( cd /;
       eval "$VERIFYCMD" 
@@ -512,6 +513,9 @@
 runbackup ()
 {
     VOLUMENAME=$2	# store name for usage in .rc file
+    if [ -d "$BACKUPDEV" ]; then
+    	BACKUPDEV="${BACKUPDEV}/${VOLUMENAME}_${DATE}_${TYPE}.${EXT}"
+    fi
     
     message "Now starting backup program to write to $BACKUPDEV."
     sed -e 's.\\\\.\\.g' -e "$SEDNAMESCRIPT" < "$1" > $FILELIST
@@ -553,9 +557,9 @@
 	exclude=$base.exclude
 
 	echo "Volume \"$base\""
-	message "    starts:   " `cat $f`
+	echo "    starts:   " `cat $f`
 	if [ -f $exclude ] ; then
-	    message "    excludes: " `cat $exclude`
+	    echo "    excludes: " `cat $exclude`
 	fi
     done
 }
@@ -576,12 +580,14 @@
 
 deleteoldbackups ()
 {
-    if [ -d "$BACKUPDIR" -a "$MAXBACKUPAGE" -ge 0 ]; then
+    # Since runbackups has run, $BACKUPDEV is either a file or a device.
+    # We only do deletions when it is a file.
+    if [ "$MAXBACKUPAGE" -ge 0 -a -f "$BACKUPDEV" ]; then
 	UPTO=`basename $BACKUPDEV`
-	cd $BACKUPDIR
-	message "Deleting old backups:"
+	cd `dirname $BACKUPDEV`
+	message "Deleting old backups from `dirname $BACKUPDEV`:"
 	PR=""; [ "$VERBOSE" == "yes" ] && PR="-print"
-	find . -regex ./${VOLUMENAME}_'.*\('$1'\).*' -type f -maxdepth 1 -mtime +$MAXBACKUPAGE ! -name "$UPTO" -exec $RM -f {} \; $PR
+	find . -regex ./${VOLUMENAME}_'.*\('$1'\).*' -type f -mtime +$MAXBACKUPAGE ! -name "$UPTO" -exec $RM -f {} \; $PR
     fi
 }
 
@@ -691,15 +697,13 @@
 # generate listing of stuff on backup device
 verbose ()
 {
-
-    if [ -d "$BACKUPDIR" ]; then
-      message "Generating report of $BACKUPDIR."
-      for i in `$LS ${BACKUPDIR}/*`; do
+    message "Generating report of $BACKUPDEV."
+    if [ -d "$BACKUPDEV" ]; then
+      for i in `$LS ${BACKUPDEV}/*.${EXT}`; do
       	BACKUPDEV=$i
 	eval "$LISTCMD"
       done
     else
-      message "Generating report of $BACKUPDEV."
       eval "$LISTCMD" || error "listing of $BACKUPDEV cannot be generated."
     fi
 }
@@ -718,8 +722,8 @@
     FILESPEC=$3
     message "Restoring volume $VOLUMENAME files matching $FILESPEC into $startdir."
 
-    if [ -d "$BACKUPDIR" ]; then
-       for i in `$LS ${BACKUPDIR}/${VOLUMENAME}_*.${EXT}`; do
+    if [ -d "$BACKUPDEV" ]; then
+       for i in `$LS ${BACKUPDEV}/${VOLUMENAME}_*.${EXT}`; do
           BACKUPDEV=$i
 	  eval "$RESTORECMD" && message "restored data from $i"
        done
Index: git/tob.8
===================================================================
--- git.orig/tob.8	2022-09-18 10:05:31.000000000 +0200
+++ git/tob.8	2016-11-13 20:34:15.000000000 +0100
@@ -1,10 +1,10 @@
-T.\" Manual page Copyright (C) 1995-98 Dirk Eddelbuettel <edd@debian.org>
+.\" Manual page Copyright (C) 1995-98 Dirk Eddelbuettel <edd@debian.org>
 .\" 1998-11-11 Jim Van Zandt <jrv@vanzandt.mv.com>:  -restore takes
 .\"   both specification and directory arguments,  the specification
 .\"   is *not* a regular expression, and wording and format fixes.
 .\" 15 Nov 1998 Dirk Eddelbuettel <edd@debian.org>
 .\"             documented new option '-verify volume'
-.TH TOB 8 "September 15, 2002" "Debian GNU/Linux"
+.TH TOB 8 "September 15, 2002"
 .SH NAME
 tob \- Tape Oriented Backup
 .SH SYNOPSIS
@@ -114,14 +114,14 @@
 .B "\-find" 
 command is useful to determine in which backup a given file resides. E.g.,
 the command
-.ce
-tob \-find '.*in' 
-.cd 0
+.br
+   tob \-find '.*in' 
+.br
 lists all files ending with "in". The files can then be restored from the
 reported backup.  The command
-.ce 
-tob \-find .
-.cd 0
+.br
+   tob \-find .
+.br
 will list all files of all volumes.
 .TP
 .BI "\-full " volume
@@ -179,9 +179,9 @@
 will restore any files which start with 
 "/etc/def". 
 Wildcards may have to be quoted to prevent shell expansion, as in:
-.ce 
-tob \-restore '/etc/def*'
-.cd 0
+.br
+  tob \-restore '/etc/def*'
+.br
 .\"The file specification is actually a regular expression; this means that you
 You can, e.g., restore all files which end in "myfile" with the expression 
 .IR "*myfile" ; 
Index: git/tob.rc
===================================================================
--- git.orig/tob.rc	2022-09-18 10:05:31.000000000 +0200
+++ git/tob.rc	2016-11-13 20:34:15.000000000 +0100
@@ -15,21 +15,43 @@
 # Debian stores tob configuration in and below this directory 
 TOBHOME="/etc/tob"			
 
-# Examples for possible backup devices selected via BACKUPDEV
-#
-# /dev/ftape should be a link to your the device corresponding to your tape
+# Examples for possible backup devices selected via BACKUPDEV:
+# 
+# 1) A device, for example
 #
 # BACKUPDEV="/dev/ftape"			
-#
-# or use the tape drive on another networked box 'groucho.my.net'
+# 
+# where /dev/ftape should be a link to your the device corresponding 
+# to your tape.
+# 
+# Or use the tape drive on another networked box 'groucho.my.net':
+# 
 # BACKUPDEV="groucho.my.net:/dev/ftape"	
 #
-# or use a filesystem-based backup:
-BACKUPDEV="/var/backups/"
-
-# If you're using a filesystem backup, tob will clean out old backups
-# for you once they reach a certain age.  Set that age (in days) here:
-MAXBACKUPAGE=5
+# 2) A directory, for example:
+# 
+# BACKUPDEV="/var/lib/tob"
+# 
+# In this case, tob chooses the file name to use. This is the default.
+# 
+# 3) A file, for example:
+# 
+# if [ ! "$TYPE" == "none" ]; then
+#   TODAYIS=`date +%y%m%d`
+#   MYBACKUPDIR="/Backups/${HOSTNAME}/${TODAYIS}-${TYPE}"
+#   BACKUPDEV="${MYBACKUPDIR}/${TODAYIS}-${TYPE}-${VOLUMENAME}.tar.gz"
+#   mkdir -p ${MYBACKUPDIR}
+# fi
+#
+# BACKUPDEV can be overridden by specifying "-f path" on the tob
+# command line.
+
+# If you're using a filesystem backup, tob can delete old backups
+# in the directory containing the new backup.  It will only delete
+# backups that aren't needed for a full restore, and which are
+# at least MAXBACKUPAGE days old.  If MAXBACKUPAGE is negative, 
+# no old backups are deleted.
+MAXBACKUPAGE=-1
 
 # PRECMD and POSTCMD are not needed for loading/unloading of the ftape
 # modules if the following two lines are added to /etc/conf.modules so that 
@@ -47,9 +69,23 @@
 #
 # I use the following command to retension the tape before I backup:
 # PRECMD='ftmt -f $BACKUPDEV retension 2>/dev/null; echo Tape retensioned'
-#DELETIONSCOMMAND='cat >$BACKUPDIR/${VOLUMENAME}_${DATE}_${TYPE}_deletions'
-# Debian bug report #233300 suggests
-DELETIONSCOMMAND='cat >${TOBLISTS}/${VOLUMENAME}_${DATE}_${TYPE}_deletions'
+
+# A list of all files that have been deleted will be piped to
+# the following command.  This information is necessary after
+# a differential or incremental backup if you want to restore
+# the filesystem to the same state it is in.  Thus this data
+# should be saved along with your backups.  If unset, no
+# deletion list is saved.  Examples:
+# 
+# If $BACKUPDEV is a directory:
+# 
+DELETIONSCOMMAND='cat >${BACKUPDEV}/${VOLUMENAME}_${DATE}_${TYPE}_deletions'
+# 
+# If $BACKUPDEV is a device:
+# 
+# DELETIONSCOMMAND='cat >${BACKUPDEV}'
+#
+# In either case, "cat" could be replaced with "gzip".
 
 # let tob be explicit
 VERBOSE='yes'				
@@ -69,8 +105,10 @@
 GZIPFACTOR='-G 9 -Z '
 
 # These commands select afio as the backup engine with the selected 
-# compression and block sizes, more examples for tob and afio use are 
-# provided in /usr/doc/tob/examples
+# compression and block sizes.  More examples for tob and afio use are 
+# provided in /usr/doc/tob/examples.  Note that if BACKUPDEV is set
+# to a directory, tob will reset it to a filename before calling
+# these commands.
 BACKUPCMD='afio $BLOCKSIZE $BUFFERBLK $GZIPFACTOR -o $BACKUPDEV < $FILELIST'
 BACKUPCMDTOSTDOUT='afio $BLOCKSIZE $BUFFERBLK $GZIPFACTOR -o - < $FILELIST'
 LISTCMD='afio $BLOCKSIZE $BUFFERBLK -t $BACKUPDEV'
@@ -81,7 +119,3 @@
 # Note: if you change this, you might have to mop up backups with the old
 # extension yourself.
 EXT=gz
-
-
-
-
