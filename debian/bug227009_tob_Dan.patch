--- tob.orig.3	2004-02-26 22:03:46.000000000 -0500
+++ tob	2004-03-06 20:21:52.000000000 -0500
@@ -197,7 +197,7 @@
     
     if [ "$NEEDROOT" = "yes" ] ; then
 	if [ $UID -ne 0 ]; then
-	    error "You need to be root to run tobs!"
+	    error "You need to be root to run tob!"
 	fi
     fi
 }
@@ -218,14 +218,9 @@
     	error "BACKUPDIR is deprecated: check your config file, and rename it to BACKUPDEV"
     fi
 
-    if [ -d "$BACKUPDEV" ]; then
-    	BACKUPDIR=$BACKUPDEV
-    	BACKUPDEV="${BACKUPDIR}/${VOLUMENAME}_${DATE}_${TYPE}.${EXT}"
-    elif [ "$BACKUPDEV" = "" ]; then
-        BACKUPDIR="/var/lib/tob"
-    	BACKUPDEV="${BACKUPDIR}/${VOLUMENAME}_${DATE}_${TYPE}.${EXT}"
-    elif [ -f "$BACKUPDEV" -o ! -e "$BACKUPDEV" ]; then
-        BACKUPDIR=`dirname $BACKUPDEV`
+    if [ "$BACKUPDEV" = "" ]; then
+        BACKUPDEV="/var/lib/tob"
+	message "Using default backup device $BACKUPDEV"
     fi
 
     # check that relevant environment vars are set
@@ -497,8 +492,8 @@
 runverify ()
 {
     VOLUMENAME=$2		     # store name for usage in .rc file
-    if [ -d "$BACKUPDIR" ]; then
-	BACKUPDEV=`$LS ${BACKUPDIR}/${VOLUMENAME}_*Full.${EXT}`
+    if [ -d "$BACKUPDEV" ]; then
+	BACKUPDEV=`$LS ${BACKUPDEV}/${VOLUMENAME}_*full.${EXT}`
     fi
     message "Now starting verify program for $BACKUPDEV."
     ( cd /;
@@ -512,6 +507,9 @@
 runbackup ()
 {
     VOLUMENAME=$2	# store name for usage in .rc file
+    if [ -d "$BACKUPDEV" ]; then
+    	BACKUPDEV="${BACKUPDEV}/${VOLUMENAME}_${DATE}_${TYPE}.${EXT}"
+    fi
     
     message "Now starting backup program to write to $BACKUPDEV."
     sed -e 's.\\\\.\\.g' -e "$SEDNAMESCRIPT" < "$1" > $FILELIST
@@ -553,9 +551,9 @@
 	exclude=$base.exclude
 
 	echo "Volume \"$base\""
-	message "    starts:   " `cat $f`
+	echo "    starts:   " `cat $f`
 	if [ -f $exclude ] ; then
-	    message "    excludes: " `cat $exclude`
+	    echo "    excludes: " `cat $exclude`
 	fi
     done
 }
@@ -576,10 +574,12 @@
 
 deleteoldbackups ()
 {
-    if [ -d "$BACKUPDIR" -a "$MAXBACKUPAGE" -ge 0 ]; then
+    # Since runbackups has run, $BACKUPDEV is either a file or a device.
+    # We only do deletions when it is a file.
+    if [ "$MAXBACKUPAGE" -ge 0 -a -f "$BACKUPDEV" ]; then
 	UPTO=`basename $BACKUPDEV`
-	cd $BACKUPDIR
-	message "Deleting old backups:"
+	cd `dirname $BACKUPDEV`
+	message "Deleting old backups from `dirname $BACKUPDEV`:"
 	PR=""; [ "$VERBOSE" == "yes" ] && PR="-print"
 	find . -regex ./${VOLUMENAME}_'.*\('$1'\).*' -type f -maxdepth 1 -mtime +$MAXBACKUPAGE ! -name "$UPTO" -exec $RM -f {} \; $PR
     fi
@@ -691,15 +691,13 @@
 # generate listing of stuff on backup device
 verbose ()
 {
-
-    if [ -d "$BACKUPDIR" ]; then
-      message "Generating report of $BACKUPDIR."
-      for i in `$LS ${BACKUPDIR}/*`; do
+    message "Generating report of $BACKUPDEV."
+    if [ -d "$BACKUPDEV" ]; then
+      for i in `$LS ${BACKUPDEV}/*.${EXT}`; do
       	BACKUPDEV=$i
 	eval "$LISTCMD"
       done
     else
-      message "Generating report of $BACKUPDEV."
       eval "$LISTCMD" || error "listing of $BACKUPDEV cannot be generated."
     fi
 }
@@ -718,8 +716,8 @@
     FILESPEC=$3
     message "Restoring volume $VOLUMENAME files matching $FILESPEC into $startdir."
 
-    if [ -d "$BACKUPDIR" ]; then
-       for i in `$LS ${BACKUPDIR}/${VOLUMENAME}_*.${EXT}`; do
+    if [ -d "$BACKUPDEV" ]; then
+       for i in `$LS ${BACKUPDEV}/${VOLUMENAME}_*.${EXT}`; do
           BACKUPDEV=$i
 	  eval "$RESTORECMD" && message "restored data from $i"
        done
