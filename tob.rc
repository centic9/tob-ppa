# tob.rc --- resource file for the Debian GNU/Linux package of the 
#            `tob' tape-oriented backup program by Karel Kubat
#
# This file is sourced by /sbin/tob.
#
# Some site or hardware specific settings may have to be added locally.
# See the manual page tob(1), the comments in the script /sbin/tob, the 
# documentation in /usr/share/doc/tob/tob.txt.gz and 
# /usr/share/doc/tob/tob.ps.gz, and the examples from the tob sources 
# that are installed in the directory /usr/share/doc/tob/examples for 
# more details.
#
# Copyright 1996-1999 Dirk Eddelbuettel <edd@debian.org>  

# Debian stores tob configuration in and below this directory 
TOBHOME="/etc/tob"			

# Examples for possible backup devices selected via BACKUPDEV:
# 
# 1) A device, for example
#
# BACKUPDEV="/dev/ftape"			
# 
# where /dev/ftape should be a link to your the device corresponding 
# to your tape.
# 
# Or use the tape drive on another networked box 'groucho.my.net':
# 
# BACKUPDEV="groucho.my.net:/dev/ftape"	
#
# 2) A directory, for example:
# 
# BACKUPDEV="/var/lib/tob"
# 
# In this case, tob chooses the file name to use. This is the default.
# 
# 3) A file, for example:
# 
# if [ ! "$TYPE" == "none" ]; then
#   TODAYIS=`date +%y%m%d`
#   MYBACKUPDIR="/Backups/${HOSTNAME}/${TODAYIS}-${TYPE}"
#   BACKUPDEV="${MYBACKUPDIR}/${TODAYIS}-${TYPE}-${VOLUMENAME}.tar.gz"
#   mkdir -p ${MYBACKUPDIR}
# fi
#
# BACKUPDEV can be overridden by specifying "-f path" on the tob
# command line.

# If you're using a filesystem backup, tob can delete old backups
# in the directory containing the new backup.  It will only delete
# backups that aren't needed for a full restore, and which are
# at least MAXBACKUPAGE days old.  If MAXBACKUPAGE is negative, 
# no old backups are deleted.
MAXBACKUPAGE=-1

# PRECMD and POSTCMD are not needed for loading/unloading of the ftape
# modules if the following two lines are added to /etc/conf.modules so that 
# kerneld can load the ftape module (also see the documentation for zftape)
#	alias char-major-27 zftape
#	pre-install ftape /sbin/swapout 5
#
# Otherwise you can explicitly load and unload the ftape module:
# PRECMD=`modprobe ftape`		# ftape module loading on demand
# POSTCMD=`rmmod ftape`			# ftape module removal on demand
# 
# another possibility is call swapout so that dmalloc() doesn't fail 
# [ no longer needed as the ftape package adds this to /etc/conf.modules ]
# PRECMD='swapout -m 5'
#
# I use the following command to retension the tape before I backup:
# PRECMD='ftmt -f $BACKUPDEV retension 2>/dev/null; echo Tape retensioned'

# A list of all files that have been deleted will be piped to
# the following command.  This information is necessary after
# a differential or incremental backup if you want to restore
# the filesystem to the same state it is in.  Thus this data
# should be saved along with your backups.  If unset, no
# deletion list is saved.  Examples:
# 
# If $BACKUPDEV is a directory:
# 
DELETIONSCOMMAND='cat >${BACKUPDEV}/${VOLUMENAME}_${DATE}_${TYPE}_deletions'
# 
# If $BACKUPDEV is a device:
# 
# DELETIONSCOMMAND='cat >${BACKUPDEV}'
#
# In either case, "cat" could be replaced with "gzip".

# let tob be explicit
VERBOSE='yes'				

# Should find be nice'd ?
NICEFIND='no'

# The amount of RAM devoted to buffering I/O blocks.  
# Good for streaming tape drives.
BUFFERBLK="-c 1000"

# The amount of data to be written with each block.  The normal
# amount for the {zftape} device driver should be given here:
BLOCKSIZE="-b 10240"

# The GZip compression factor (default=6; range 1-9; 9 is highest)
GZIPFACTOR='-G 9 -Z '

# These commands select afio as the backup engine with the selected 
# compression and block sizes.  More examples for tob and afio use are 
# provided in /usr/doc/tob/examples.  Note that if BACKUPDEV is set
# to a directory, tob will reset it to a filename before calling
# these commands.
BACKUPCMD='afio $BLOCKSIZE $BUFFERBLK $GZIPFACTOR -o $BACKUPDEV < $FILELIST'
BACKUPCMDTOSTDOUT='afio $BLOCKSIZE $BUFFERBLK $GZIPFACTOR -o - < $FILELIST'
LISTCMD='afio $BLOCKSIZE $BUFFERBLK -t $BACKUPDEV'
RESTORECMD='afio $BLOCKSIZE $BUFFERBLK $GZIPFACTOR -viny"$FILESPEC" $BACKUPDEV'
VERIFYCMD='afio $BLOCKSIZE $BUFFERBLK $GZIPFACTOR -r $BACKUPDEV'

# Identify the extension produced by BACKUPCMD during filesystem backups
# Note: if you change this, you might have to mop up backups with the old
# extension yourself.
EXT=gz
